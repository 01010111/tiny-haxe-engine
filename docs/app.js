// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
var Controls = function() { };
Controls.init = function() {
	window.document.onkeydown = function(e) {
		Controls.k.h[e.keyCode] = true;
		return;
	};
	window.document.onkeyup = function(e1) {
		Controls.k.h[e1.keyCode] = false;
		return;
	};
	Game.ctx.canvas.onpointerdown = function(e2) {
		Controls.k.h[-1 - e2.button] = true;
		return;
	};
	Game.ctx.canvas.onpointerup = function(e3) {
		Controls.k.h[-1 - e3.button] = false;
		return;
	};
	Game.ctx.canvas.ontouchstart = function(e4) {
		Controls.k.h[-1] = true;
		return;
	};
	Game.ctx.canvas.ontouchend = function(e5) {
		Controls.k.h[-1] = false;
		return;
	};
	Game.ctx.canvas.onpointermove = function(e6) {
		return Controls.M = { x : Math.floor(e6.offsetX / Game.zx), y : Math.floor(e6.offsetY / Game.zy)};
	};
	Game.ctx.canvas.ontouchmove = function(e7) {
		return Controls.M = { x : Math.floor(e7.touches[0].clientX / Game.zx), y : Math.floor(e7.touches[0].clientY / Game.zy)};
	};
};
Controls.p = function(n) {
	if(Controls.k.h.hasOwnProperty(n)) {
		return Controls.k.h[n];
	} else {
		return false;
	}
};
Controls.jp = function(n) {
	if(!Controls.k.h.hasOwnProperty(n)) {
		return false;
	}
	if(!Controls.l.h.hasOwnProperty(n)) {
		Controls.l.h[n] = Controls.k.h[n];
		return Controls.k.h[n];
	}
	var o = Controls.l.h[n] != Controls.k.h[n] && Controls.k.h[n];
	Controls.l.h[n] = Controls.k.h[n];
	return o;
};
var DrawTools = function() { };
DrawTools.l = function(ctx,col,x1,y1,x2,y2,lw) {
	DrawTools.ls(ctx,col,lw);
	ctx.moveTo(x1,y1);
	ctx.lineTo(x2,y2);
	ctx.stroke();
	return ctx;
};
DrawTools.fc = function(ctx,col,x,y,r) {
	ctx.fillStyle = col;
	ctx.beginPath();
	ctx.arc(x,y,r,0,2 * Math.PI);
	ctx.fill();
	return ctx;
};
DrawTools.c = function(ctx,col,x,y,r,lw) {
	DrawTools.ls(ctx,col,lw);
	ctx.arc(x,y,r,0,2 * Math.PI);
	ctx.stroke();
	return ctx;
};
DrawTools.fr = function(ctx,col,x,y,w,h) {
	ctx.fillStyle = col;
	ctx.fillRect(x,y,w,h);
	return ctx;
};
DrawTools.r = function(ctx,col,x,y,w,h,lw) {
	DrawTools.ls(ctx,col,lw);
	ctx.strokeRect(x,y,w,h);
	return ctx;
};
DrawTools.clr = function(ctx) {
	ctx.clearRect(0,0,Game.w,Game.h);
};
DrawTools.spr = function(ctx,n,x,y,w,h) {
	w = (w != null ? w : 1) * Sprite.fw;
	h = (h != null ? h : 1) * Sprite.fh;
	ctx.drawImage(Sprite.s,n % Sprite.col * Sprite.fw,Math.floor(n / Sprite.col) * Sprite.fh,w,h,Math.round(x),Math.round(y),w,h);
};
DrawTools.ls = function(ctx,col,lw) {
	ctx.lineWidth = lw != null ? lw : 1;
	ctx.strokeStyle = col;
	ctx.beginPath();
	return ctx;
};
var Game = $hx_exports["Game"] = function() { };
Game.init = function(p,_w,_h) {
	window.document.oncontextmenu = function(e) {
		return e.preventDefault();
	};
	var c = window.document.createElement("canvas");
	var el = window.document.getElementById(p);
	el.appendChild(c);
	Game.w = c.width = _w;
	Game.h = c.height = _h;
	Game.ctx = c.getContext("2d",null);
	Controls.init();
	window.onresize = function(e1) {
		Game.zx = el.offsetWidth / _w;
		return Game.zy = el.offsetHeight / _h;
	};
	window.onresize();
	window.requestAnimationFrame(Game.loop);
};
Game.loop = function(e) {
	Game.s.update();
	Game.s.draw();
	window.requestAnimationFrame(Game.loop);
};
var Main = function() { };
Main.main = function() {
};
var Sprite = function() { };
Sprite.load = function(src,fw,fh,col) {
	var d = window.document.createElement("div");
	d.style.display = "none";
	window.document.body.appendChild(d);
	Sprite.s = window.document.createElement("img");
	Sprite.s.src = src;
	d.appendChild(Sprite.s);
	Sprite.fw = fw;
	Sprite.fh = fh;
	Sprite.col = col;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
Controls.M = { x : 0, y : 0};
Controls.k = new haxe_ds_IntMap();
Controls.l = new haxe_ds_IntMap();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
